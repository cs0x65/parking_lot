package cs0x65.parkinglot.command;

/**
 * Interface for parsing the command text.
 * The implementation class is expected to provide below functionality - :
 * <ul>
 *   <li>
 *       Syntactic validations: to make sure the command supplied is amongst the set of supported commands and &
 *       adheres to the grammar/syntax of the command.
 *   </li>
 *   <li>
 *       Building domain specific {@link Command} instances that are backed by the domain implementation class
 *       and where {@code T} is the actual target to carry out the supplied command.
 *       Effectively, {@code Parser} also forms the bridge between the textual commands supplied and the supporting
 *       domain classes by building instances of the {@code Command<T>}.
 *       It is responsibility of the parser implementation to make sure all the necessary information and metadata
 *       is supplied to the {@code Command<T>} instances for their correct execution.
 *       Refer {@link cs0x65.parkinglot.command.DefaultParserImpl} which is the domain specific implementation of the
 *       {@code Parser} pertaining to {@link cs0x65.parkinglot.impl.ParkingLot}.
 *   </li>
 * </ul>
 * @param <T> the domain specific target class that backs the {@code Command}(s) generated by the parser on successful
 *           parsing.
 */
public interface Parser<T> {
    Command<T> parse(String commandString) throws BadCommandException;
}
